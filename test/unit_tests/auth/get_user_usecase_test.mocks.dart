// Mocks generated by Mockito 5.4.2 from annotations
// in learning/test/unit_tests/auth/get_user_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:learning/src/data/datasource/auth_remote_datasource.dart'
    as _i2;
import 'package:learning/src/data/model/register_user_request_model.dart'
    as _i6;
import 'package:learning/src/data/repository/auth_repository_impl.dart' as _i3;
import 'package:learning/src/domain/entity/user_response_entity.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRemoteDatasource_0 extends _i1.SmartFake
    implements _i2.AuthRemoteDatasource {
  _FakeAuthRemoteDatasource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepositoryImpl extends _i1.Mock
    implements _i3.AuthRepositoryImpl {
  @override
  _i2.AuthRemoteDatasource get remoteDatasource => (super.noSuchMethod(
        Invocation.getter(#remoteDatasource),
        returnValue: _FakeAuthRemoteDatasource_0(
          this,
          Invocation.getter(#remoteDatasource),
        ),
        returnValueForMissingStub: _FakeAuthRemoteDatasource_0(
          this,
          Invocation.getter(#remoteDatasource),
        ),
      ) as _i2.AuthRemoteDatasource);

  @override
  _i4.Future<_i5.UserDataEntity?> getUserByEmail({required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByEmail,
          [],
          {#email: email},
        ),
        returnValue: _i4.Future<_i5.UserDataEntity?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.UserDataEntity?>.value(),
      ) as _i4.Future<_i5.UserDataEntity?>);

  @override
  bool isSignedInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #isSignedInWithGoogle,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<bool> isUserRegistered() => (super.noSuchMethod(
        Invocation.method(
          #isUserRegistered,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> registerUser(
          {required _i6.RegisterUserRequestModel? request}) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [],
          {#request: request},
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i7.User?> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i4.Future<_i7.User?>.value(),
        returnValueForMissingStub: _i4.Future<_i7.User?>.value(),
      ) as _i4.Future<_i7.User?>);
}
